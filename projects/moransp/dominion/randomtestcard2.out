
------TESTING card: Smithy------
Interval:0
current seed value: 9384
[36mTESTING:[0m status return 0---
[32mPASS - Expected value:0, Actual:0[0m
[36mTESTING:[0m handcount += 2---
[31mFAIL - Expected value: 7, Actual: 8[0m
[36mTESTING:[0m discardpile + 1---
[31mFAIL - Expected value: 1, Actual: 0[0m
[36mTESTING:[0m status return 0---
[32mPASS - Expected value:0, Actual:0[0m
[36mTESTING:[0m handcount += 2---
[32mPASS - Expected value:10, Actual:10[0m
[36mTESTING:[0m discardpile + 1---
[31mFAIL - Expected value: 1, Actual: 0[0m
Interval:2
current seed value: 2778
[36mTESTING:[0m status return 0---
[32mPASS - Expected value:0, Actual:0[0m
[36mTESTING:[0m handcount += 2---
[31mFAIL - Expected value: 7, Actual: 8[0m
[36mTESTING:[0m discardpile + 1---
[31mFAIL - Expected value: 1, Actual: 0[0m
[36mTESTING:[0m status return 0---
[32mPASS - Expected value:0, Actual:0[0m
[36mTESTING:[0m handcount += 2---
[32mPASS - Expected value:10, Actual:10[0m
[36mTESTING:[0m discardpile + 1---
[31mFAIL - Expected value: 1, Actual: 0[0m
Interval:4
current seed value: 7794
[36mTESTING:[0m status return 0---
[32mPASS - Expected value:0, Actual:0[0m
[36mTESTING:[0m handcount += 2---
[31mFAIL - Expected value: 7, Actual: 8[0m
[36mTESTING:[0m discardpile + 1---
[31mFAIL - Expected value: 1, Actual: 0[0m
[36mTESTING:[0m status return 0---
[32mPASS - Expected value:0, Actual:0[0m
[36mTESTING:[0m handcount += 2---
[32mPASS - Expected value:10, Actual:10[0m
[36mTESTING:[0m discardpile + 1---
[31mFAIL - Expected value: 1, Actual: 0[0m
Interval:6
current seed value: 5387
[36mTESTING:[0m status return 0---
[32mPASS - Expected value:0, Actual:0[0m
[36mTESTING:[0m handcount += 2---
[31mFAIL - Expected value: 7, Actual: 8[0m
[36mTESTING:[0m discardpile + 1---
[31mFAIL - Expected value: 1, Actual: 0[0m
[36mTESTING:[0m status return 0---
[32mPASS - Expected value:0, Actual:0[0m
[36mTESTING:[0m handcount += 2---
[32mPASS - Expected value:10, Actual:10[0m
[36mTESTING:[0m discardpile + 1---
[31mFAIL - Expected value: 1, Actual: 0[0m
Interval:8
current seed value: 6650
[36mTESTING:[0m status return 0---
[32mPASS - Expected value:0, Actual:0[0m
[36mTESTING:[0m handcount += 2---
[31mFAIL - Expected value: 7, Actual: 8[0m
[36mTESTING:[0m discardpile + 1---
[31mFAIL - Expected value: 1, Actual: 0[0m
[36mTESTING:[0m status return 0---
[32mPASS - Expected value:0, Actual:0[0m
[36mTESTING:[0m handcount += 2---
[32mPASS - Expected value:10, Actual:10[0m
[36mTESTING:[0m discardpile + 1---
[31mFAIL - Expected value: 1, Actual: 0[0m
Interval:10
current seed value: 2363
[36mTESTING:[0m status return 0---
[32mPASS - Expected value:0, Actual:0[0m
[36mTESTING:[0m handcount += 2---
[31mFAIL - Expected value: 7, Actual: 8[0m
[36mTESTING:[0m discardpile + 1---
[31mFAIL - Expected value: 1, Actual: 0[0m
[36mTESTING:[0m status return 0---
[32mPASS - Expected value:0, Actual:0[0m
[36mTESTING:[0m handcount += 2---
[32mPASS - Expected value:10, Actual:10[0m
[36mTESTING:[0m discardpile + 1---
[31mFAIL - Expected value: 1, Actual: 0[0m
Interval:12
current seed value: 8691
[36mTESTING:[0m status return 0---
[32mPASS - Expected value:0, Actual:0[0m
[36mTESTING:[0m handcount += 2---
[31mFAIL - Expected value: 7, Actual: 8[0m
[36mTESTING:[0m discardpile + 1---
[31mFAIL - Expected value: 1, Actual: 0[0m
[36mTESTING:[0m status return 0---
[32mPASS - Expected value:0, Actual:0[0m
[36mTESTING:[0m handcount += 2---
[32mPASS - Expected value:10, Actual:10[0m
[36mTESTING:[0m discardpile + 1---
[31mFAIL - Expected value: 1, Actual: 0[0m
Interval:14
current seed value: 7764
[36mTESTING:[0m status return 0---
[32mPASS - Expected value:0, Actual:0[0m
[36mTESTING:[0m handcount += 2---
[31mFAIL - Expected value: 7, Actual: 8[0m
[36mTESTING:[0m discardpile + 1---
[31mFAIL - Expected value: 1, Actual: 0[0m
[36mTESTING:[0m status return 0---
[32mPASS - Expected value:0, Actual:0[0m
[36mTESTING:[0m handcount += 2---
[32mPASS - Expected value:10, Actual:10[0m
[36mTESTING:[0m discardpile + 1---
[31mFAIL - Expected value: 1, Actual: 0[0m
Interval:16
current seed value: 541
[36mTESTING:[0m status return 0---
[32mPASS - Expected value:0, Actual:0[0m
[36mTESTING:[0m handcount += 2---
[31mFAIL - Expected value: 7, Actual: 8[0m
[36mTESTING:[0m discardpile + 1---
[31mFAIL - Expected value: 1, Actual: 0[0m
[36mTESTING:[0m status return 0---
[32mPASS - Expected value:0, Actual:0[0m
[36mTESTING:[0m handcount += 2---
[32mPASS - Expected value:10, Actual:10[0m
[36mTESTING:[0m discardpile + 1---
[31mFAIL - Expected value: 1, Actual: 0[0m
Interval:18
current seed value: 9173
[36mTESTING:[0m status return 0---
[32mPASS - Expected value:0, Actual:0[0m
[36mTESTING:[0m handcount += 2---
[31mFAIL - Expected value: 7, Actual: 8[0m
[36mTESTING:[0m discardpile + 1---
[31mFAIL - Expected value: 1, Actual: 0[0m
[36mTESTING:[0m status return 0---
[32mPASS - Expected value:0, Actual:0[0m
[36mTESTING:[0m handcount += 2---
[32mPASS - Expected value:10, Actual:10[0m
[36mTESTING:[0m discardpile + 1---
[31mFAIL - Expected value: 1, Actual: 0[0m
Interval:20
current seed value: 5212
[36mTESTING:[0m status return 0---
[32mPASS - Expected value:0, Actual:0[0m
[36mTESTING:[0m handcount += 2---
[31mFAIL - Expected value: 7, Actual: 8[0m
[36mTESTING:[0m discardpile + 1---
[31mFAIL - Expected value: 1, Actual: 0[0m
[36mTESTING:[0m status return 0---
[32mPASS - Expected value:0, Actual:0[0m
[36mTESTING:[0m handcount += 2---
[32mPASS - Expected value:10, Actual:10[0m
[36mTESTING:[0m discardpile + 1---
[31mFAIL - Expected value: 1, Actual: 0[0m
Interval:22
current seed value: 2568
[36mTESTING:[0m status return 0---
[32mPASS - Expected value:0, Actual:0[0m
[36mTESTING:[0m handcount += 2---
[31mFAIL - Expected value: 7, Actual: 8[0m
[36mTESTING:[0m discardpile + 1---
[31mFAIL - Expected value: 1, Actual: 0[0m
[36mTESTING:[0m status return 0---
[32mPASS - Expected value:0, Actual:0[0m
[36mTESTING:[0m handcount += 2---
[32mPASS - Expected value:10, Actual:10[0m
[36mTESTING:[0m discardpile + 1---
[31mFAIL - Expected value: 1, Actual: 0[0m
Interval:24
current seed value: 5783
[36mTESTING:[0m status return 0---
[32mPASS - Expected value:0, Actual:0[0m
[36mTESTING:[0m handcount += 2---
[31mFAIL - Expected value: 7, Actual: 8[0m
[36mTESTING:[0m discardpile + 1---
[31mFAIL - Expected value: 1, Actual: 0[0m
[36mTESTING:[0m status return 0---
[32mPASS - Expected value:0, Actual:0[0m
[36mTESTING:[0m handcount += 2---
[32mPASS - Expected value:10, Actual:10[0m
[36mTESTING:[0m discardpile + 1---
[31mFAIL - Expected value: 1, Actual: 0[0m
Interval:26
current seed value: 2863
[36mTESTING:[0m status return 0---
[32mPASS - Expected value:0, Actual:0[0m
[36mTESTING:[0m handcount += 2---
[31mFAIL - Expected value: 7, Actual: 8[0m
[36mTESTING:[0m discardpile + 1---
[31mFAIL - Expected value: 1, Actual: 0[0m
[36mTESTING:[0m status return 0---
[32mPASS - Expected value:0, Actual:0[0m
[36mTESTING:[0m handcount += 2---
[32mPASS - Expected value:10, Actual:10[0m
[36mTESTING:[0m discardpile + 1---
[31mFAIL - Expected value: 1, Actual: 0[0m
Interval:28
current seed value: 4068
[36mTESTING:[0m status return 0---
[32mPASS - Expected value:0, Actual:0[0m
[36mTESTING:[0m handcount += 2---
[31mFAIL - Expected value: 7, Actual: 8[0m
[36mTESTING:[0m discardpile + 1---
[31mFAIL - Expected value: 1, Actual: 0[0m
[36mTESTING:[0m status return 0---
[32mPASS - Expected value:0, Actual:0[0m
[36mTESTING:[0m handcount += 2---
[32mPASS - Expected value:10, Actual:10[0m
[36mTESTING:[0m discardpile + 1---
[31mFAIL - Expected value: 1, Actual: 0[0m
Interval:30
current seed value: 3930
[36mTESTING:[0m status return 0---
[32mPASS - Expected value:0, Actual:0[0m
[36mTESTING:[0m handcount += 2---
[31mFAIL - Expected value: 7, Actual: 8[0m
[36mTESTING:[0m discardpile + 1---
[31mFAIL - Expected value: 1, Actual: 0[0m
[36mTESTING:[0m status return 0---
[32mPASS - Expected value:0, Actual:0[0m
[36mTESTING:[0m handcount += 2---
[32mPASS - Expected value:10, Actual:10[0m
[36mTESTING:[0m discardpile + 1---
[31mFAIL - Expected value: 1, Actual: 0[0m
Interval:32
current seed value: 4023
[36mTESTING:[0m status return 0---
[32mPASS - Expected value:0, Actual:0[0m
[36mTESTING:[0m handcount += 2---
[31mFAIL - Expected value: 7, Actual: 8[0m
[36mTESTING:[0m discardpile + 1---
[31mFAIL - Expected value: 1, Actual: 0[0m
[36mTESTING:[0m status return 0---
[32mPASS - Expected value:0, Actual:0[0m
[36mTESTING:[0m handcount += 2---
[32mPASS - Expected value:10, Actual:10[0m
[36mTESTING:[0m discardpile + 1---
[31mFAIL - Expected value: 1, Actual: 0[0m
Interval:34
current seed value: 3070
[36mTESTING:[0m status return 0---
[32mPASS - Expected value:0, Actual:0[0m
[36mTESTING:[0m handcount += 2---
[31mFAIL - Expected value: 7, Actual: 8[0m
[36mTESTING:[0m discardpile + 1---
[31mFAIL - Expected value: 1, Actual: 0[0m
[36mTESTING:[0m status return 0---
[32mPASS - Expected value:0, Actual:0[0m
[36mTESTING:[0m handcount += 2---
[32mPASS - Expected value:10, Actual:10[0m
[36mTESTING:[0m discardpile + 1---
[31mFAIL - Expected value: 1, Actual: 0[0m
Interval:36
current seed value: 1394
[36mTESTING:[0m status return 0---
[32mPASS - Expected value:0, Actual:0[0m
[36mTESTING:[0m handcount += 2---
[31mFAIL - Expected value: 7, Actual: 8[0m
[36mTESTING:[0m discardpile + 1---
[31mFAIL - Expected value: 1, Actual: 0[0m
[36mTESTING:[0m status return 0---
[32mPASS - Expected value:0, Actual:0[0m
[36mTESTING:[0m handcount += 2---
[32mPASS - Expected value:10, Actual:10[0m
[36mTESTING:[0m discardpile + 1---
[31mFAIL - Expected value: 1, Actual: 0[0m
Interval:38
current seed value: 5012
[36mTESTING:[0m status return 0---
[32mPASS - Expected value:0, Actual:0[0m
[36mTESTING:[0m handcount += 2---
[31mFAIL - Expected value: 7, Actual: 8[0m
[36mTESTING:[0m discardpile + 1---
[31mFAIL - Expected value: 1, Actual: 0[0m
[36mTESTING:[0m status return 0---
[32mPASS - Expected value:0, Actual:0[0m
[36mTESTING:[0m handcount += 2---
[32mPASS - Expected value:10, Actual:10[0m
[36mTESTING:[0m discardpile + 1---
[31mFAIL - Expected value: 1, Actual: 0[0m
Interval:40
current seed value: 6230
[36mTESTING:[0m status return 0---
[32mPASS - Expected value:0, Actual:0[0m
[36mTESTING:[0m handcount += 2---
[31mFAIL - Expected value: 7, Actual: 8[0m
[36mTESTING:[0m discardpile + 1---
[31mFAIL - Expected value: 1, Actual: 0[0m
[36mTESTING:[0m status return 0---
[32mPASS - Expected value:0, Actual:0[0m
[36mTESTING:[0m handcount += 2---
[32mPASS - Expected value:10, Actual:10[0m
[36mTESTING:[0m discardpile + 1---
[31mFAIL - Expected value: 1, Actual: 0[0m
Interval:42
current seed value: 4422
[36mTESTING:[0m status return 0---
[32mPASS - Expected value:0, Actual:0[0m
[36mTESTING:[0m handcount += 2---
[31mFAIL - Expected value: 7, Actual: 8[0m
[36mTESTING:[0m discardpile + 1---
[31mFAIL - Expected value: 1, Actual: 0[0m
[36mTESTING:[0m status return 0---
[32mPASS - Expected value:0, Actual:0[0m
[36mTESTING:[0m handcount += 2---
[32mPASS - Expected value:10, Actual:10[0m
[36mTESTING:[0m discardpile + 1---
[31mFAIL - Expected value: 1, Actual: 0[0m
Interval:44
current seed value: 3785
[36mTESTING:[0m status return 0---
[32mPASS - Expected value:0, Actual:0[0m
[36mTESTING:[0m handcount += 2---
[31mFAIL - Expected value: 7, Actual: 8[0m
[36mTESTING:[0m discardpile + 1---
[31mFAIL - Expected value: 1, Actual: 0[0m
[36mTESTING:[0m status return 0---
[32mPASS - Expected value:0, Actual:0[0m
[36mTESTING:[0m handcount += 2---
[32mPASS - Expected value:10, Actual:10[0m
[36mTESTING:[0m discardpile + 1---
[31mFAIL - Expected value: 1, Actual: 0[0m
Interval:46
current seed value: 5199
[36mTESTING:[0m status return 0---
[32mPASS - Expected value:0, Actual:0[0m
[36mTESTING:[0m handcount += 2---
[31mFAIL - Expected value: 7, Actual: 8[0m
[36mTESTING:[0m discardpile + 1---
[31mFAIL - Expected value: 1, Actual: 0[0m
[36mTESTING:[0m status return 0---
[32mPASS - Expected value:0, Actual:0[0m
[36mTESTING:[0m handcount += 2---
[32mPASS - Expected value:10, Actual:10[0m
[36mTESTING:[0m discardpile + 1---
[31mFAIL - Expected value: 1, Actual: 0[0m
Interval:48
current seed value: 8316
[36mTESTING:[0m status return 0---
[32mPASS - Expected value:0, Actual:0[0m
[36mTESTING:[0m handcount += 2---
[31mFAIL - Expected value: 7, Actual: 8[0m
[36mTESTING:[0m discardpile + 1---
[31mFAIL - Expected value: 1, Actual: 0[0m
[36mTESTING:[0m status return 0---
[32mPASS - Expected value:0, Actual:0[0m
[36mTESTING:[0m handcount += 2---
[32mPASS - Expected value:10, Actual:10[0m
[36mTESTING:[0m discardpile + 1---
[31mFAIL - Expected value: 1, Actual: 0[0m
Interval:50
current seed value: 6414
[36mTESTING:[0m status return 0---
[32mPASS - Expected value:0, Actual:0[0m
[36mTESTING:[0m handcount += 2---
[31mFAIL - Expected value: 7, Actual: 8[0m
[36mTESTING:[0m discardpile + 1---
[31mFAIL - Expected value: 1, Actual: 0[0m
[36mTESTING:[0m status return 0---
[32mPASS - Expected value:0, Actual:0[0m
[36mTESTING:[0m handcount += 2---
[32mPASS - Expected value:10, Actual:10[0m
[36mTESTING:[0m discardpile + 1---
[31mFAIL - Expected value: 1, Actual: 0[0m
Interval:52
current seed value: 6092
[36mTESTING:[0m status return 0---
[32mPASS - Expected value:0, Actual:0[0m
[36mTESTING:[0m handcount += 2---
[31mFAIL - Expected value: 7, Actual: 8[0m
[36mTESTING:[0m discardpile + 1---
[31mFAIL - Expected value: 1, Actual: 0[0m
[36mTESTING:[0m status return 0---
[32mPASS - Expected value:0, Actual:0[0m
[36mTESTING:[0m handcount += 2---
[32mPASS - Expected value:10, Actual:10[0m
[36mTESTING:[0m discardpile + 1---
[31mFAIL - Expected value: 1, Actual: 0[0m
Interval:54
current seed value: 9957
[36mTESTING:[0m status return 0---
[32mPASS - Expected value:0, Actual:0[0m
[36mTESTING:[0m handcount += 2---
[31mFAIL - Expected value: 7, Actual: 8[0m
[36mTESTING:[0m discardpile + 1---
[31mFAIL - Expected value: 1, Actual: 0[0m
[36mTESTING:[0m status return 0---
[32mPASS - Expected value:0, Actual:0[0m
[36mTESTING:[0m handcount += 2---
[32mPASS - Expected value:10, Actual:10[0m
[36mTESTING:[0m discardpile + 1---
[31mFAIL - Expected value: 1, Actual: 0[0m
Interval:56
current seed value: 6863
[36mTESTING:[0m status return 0---
[32mPASS - Expected value:0, Actual:0[0m
[36mTESTING:[0m handcount += 2---
[31mFAIL - Expected value: 7, Actual: 8[0m
[36mTESTING:[0m discardpile + 1---
[31mFAIL - Expected value: 1, Actual: 0[0m
[36mTESTING:[0m status return 0---
[32mPASS - Expected value:0, Actual:0[0m
[36mTESTING:[0m handcount += 2---
[32mPASS - Expected value:10, Actual:10[0m
[36mTESTING:[0m discardpile + 1---
[31mFAIL - Expected value: 1, Actual: 0[0m
Interval:58
current seed value: 6997
[36mTESTING:[0m status return 0---
[32mPASS - Expected value:0, Actual:0[0m
[36mTESTING:[0m handcount += 2---
[31mFAIL - Expected value: 7, Actual: 8[0m
[36mTESTING:[0m discardpile + 1---
[31mFAIL - Expected value: 1, Actual: 0[0m
[36mTESTING:[0m status return 0---
[32mPASS - Expected value:0, Actual:0[0m
[36mTESTING:[0m handcount += 2---
[32mPASS - Expected value:10, Actual:10[0m
[36mTESTING:[0m discardpile + 1---
[31mFAIL - Expected value: 1, Actual: 0[0m
Interval:60
current seed value: 2306
[36mTESTING:[0m status return 0---
[32mPASS - Expected value:0, Actual:0[0m
[36mTESTING:[0m handcount += 2---
[31mFAIL - Expected value: 7, Actual: 8[0m
[36mTESTING:[0m discardpile + 1---
[31mFAIL - Expected value: 1, Actual: 0[0m
[36mTESTING:[0m status return 0---
[32mPASS - Expected value:0, Actual:0[0m
[36mTESTING:[0m handcount += 2---
[32mPASS - Expected value:10, Actual:10[0m
[36mTESTING:[0m discardpile + 1---
[31mFAIL - Expected value: 1, Actual: 0[0m
Interval:62
current seed value: 7085
[36mTESTING:[0m status return 0---
[32mPASS - Expected value:0, Actual:0[0m
[36mTESTING:[0m handcount += 2---
[31mFAIL - Expected value: 7, Actual: 8[0m
[36mTESTING:[0m discardpile + 1---
[31mFAIL - Expected value: 1, Actual: 0[0m
[36mTESTING:[0m status return 0---
[32mPASS - Expected value:0, Actual:0[0m
[36mTESTING:[0m handcount += 2---
[32mPASS - Expected value:10, Actual:10[0m
[36mTESTING:[0m discardpile + 1---
[31mFAIL - Expected value: 1, Actual: 0[0m
Interval:64
current seed value: 337
[36mTESTING:[0m status return 0---
[32mPASS - Expected value:0, Actual:0[0m
[36mTESTING:[0m handcount += 2---
[31mFAIL - Expected value: 7, Actual: 8[0m
[36mTESTING:[0m discardpile + 1---
[31mFAIL - Expected value: 1, Actual: 0[0m
[36mTESTING:[0m status return 0---
[32mPASS - Expected value:0, Actual:0[0m
[36mTESTING:[0m handcount += 2---
[32mPASS - Expected value:10, Actual:10[0m
[36mTESTING:[0m discardpile + 1---
[31mFAIL - Expected value: 1, Actual: 0[0m
Interval:66
current seed value: 847
[36mTESTING:[0m status return 0---
[32mPASS - Expected value:0, Actual:0[0m
[36mTESTING:[0m handcount += 2---
[31mFAIL - Expected value: 7, Actual: 8[0m
[36mTESTING:[0m discardpile + 1---
[31mFAIL - Expected value: 1, Actual: 0[0m
[36mTESTING:[0m status return 0---
[32mPASS - Expected value:0, Actual:0[0m
[36mTESTING:[0m handcount += 2---
[32mPASS - Expected value:10, Actual:10[0m
[36mTESTING:[0m discardpile + 1---
[31mFAIL - Expected value: 1, Actual: 0[0m
Interval:68
current seed value: 1314
[36mTESTING:[0m status return 0---
[32mPASS - Expected value:0, Actual:0[0m
[36mTESTING:[0m handcount += 2---
[31mFAIL - Expected value: 7, Actual: 8[0m
[36mTESTING:[0m discardpile + 1---
[31mFAIL - Expected value: 1, Actual: 0[0m
[36mTESTING:[0m status return 0---
[32mPASS - Expected value:0, Actual:0[0m
[36mTESTING:[0m handcount += 2---
[32mPASS - Expected value:10, Actual:10[0m
[36mTESTING:[0m discardpile + 1---
[31mFAIL - Expected value: 1, Actual: 0[0m
Interval:70
current seed value: 6125
[36mTESTING:[0m status return 0---
[32mPASS - Expected value:0, Actual:0[0m
[36mTESTING:[0m handcount += 2---
[31mFAIL - Expected value: 7, Actual: 8[0m
[36mTESTING:[0m discardpile + 1---
[31mFAIL - Expected value: 1, Actual: 0[0m
[36mTESTING:[0m status return 0---
[32mPASS - Expected value:0, Actual:0[0m
[36mTESTING:[0m handcount += 2---
[32mPASS - Expected value:10, Actual:10[0m
[36mTESTING:[0m discardpile + 1---
[31mFAIL - Expected value: 1, Actual: 0[0m
Interval:72
current seed value: 9583
[36mTESTING:[0m status return 0---
[32mPASS - Expected value:0, Actual:0[0m
[36mTESTING:[0m handcount += 2---
[31mFAIL - Expected value: 7, Actual: 8[0m
[36mTESTING:[0m discardpile + 1---
[31mFAIL - Expected value: 1, Actual: 0[0m
[36mTESTING:[0m status return 0---
[32mPASS - Expected value:0, Actual:0[0m
[36mTESTING:[0m handcount += 2---
[32mPASS - Expected value:10, Actual:10[0m
[36mTESTING:[0m discardpile + 1---
[31mFAIL - Expected value: 1, Actual: 0[0m
Interval:74
current seed value: 8815
[36mTESTING:[0m status return 0---
[32mPASS - Expected value:0, Actual:0[0m
[36mTESTING:[0m handcount += 2---
[31mFAIL - Expected value: 7, Actual: 8[0m
[36mTESTING:[0m discardpile + 1---
[31mFAIL - Expected value: 1, Actual: 0[0m
[36mTESTING:[0m status return 0---
[32mPASS - Expected value:0, Actual:0[0m
[36mTESTING:[0m handcount += 2---
[32mPASS - Expected value:10, Actual:10[0m
[36mTESTING:[0m discardpile + 1---
[31mFAIL - Expected value: 1, Actual: 0[0m
Interval:76
current seed value: 5435
[36mTESTING:[0m status return 0---
[32mPASS - Expected value:0, Actual:0[0m
[36mTESTING:[0m handcount += 2---
[31mFAIL - Expected value: 7, Actual: 8[0m
[36mTESTING:[0m discardpile + 1---
[31mFAIL - Expected value: 1, Actual: 0[0m
[36mTESTING:[0m status return 0---
[32mPASS - Expected value:0, Actual:0[0m
[36mTESTING:[0m handcount += 2---
[32mPASS - Expected value:10, Actual:10[0m
[36mTESTING:[0m discardpile + 1---
[31mFAIL - Expected value: 1, Actual: 0[0m
Interval:78
current seed value: 4044
[36mTESTING:[0m status return 0---
[32mPASS - Expected value:0, Actual:0[0m
[36mTESTING:[0m handcount += 2---
[31mFAIL - Expected value: 7, Actual: 8[0m
[36mTESTING:[0m discardpile + 1---
[31mFAIL - Expected value: 1, Actual: 0[0m
[36mTESTING:[0m status return 0---
[32mPASS - Expected value:0, Actual:0[0m
[36mTESTING:[0m handcount += 2---
[32mPASS - Expected value:10, Actual:10[0m
[36mTESTING:[0m discardpile + 1---
[31mFAIL - Expected value: 1, Actual: 0[0m
Interval:80
current seed value: 1088
[36mTESTING:[0m status return 0---
[32mPASS - Expected value:0, Actual:0[0m
[36mTESTING:[0m handcount += 2---
[31mFAIL - Expected value: 7, Actual: 8[0m
[36mTESTING:[0m discardpile + 1---
[31mFAIL - Expected value: 1, Actual: 0[0m
[36mTESTING:[0m status return 0---
[32mPASS - Expected value:0, Actual:0[0m
[36mTESTING:[0m handcount += 2---
[32mPASS - Expected value:10, Actual:10[0m
[36mTESTING:[0m discardpile + 1---
[31mFAIL - Expected value: 1, Actual: 0[0m
Interval:82
current seed value: 7277
[36mTESTING:[0m status return 0---
[32mPASS - Expected value:0, Actual:0[0m
[36mTESTING:[0m handcount += 2---
[31mFAIL - Expected value: 7, Actual: 8[0m
[36mTESTING:[0m discardpile + 1---
[31mFAIL - Expected value: 1, Actual: 0[0m
[36mTESTING:[0m status return 0---
[32mPASS - Expected value:0, Actual:0[0m
[36mTESTING:[0m handcount += 2---
[32mPASS - Expected value:10, Actual:10[0m
[36mTESTING:[0m discardpile + 1---
[31mFAIL - Expected value: 1, Actual: 0[0m
Interval:84
current seed value: 5789
[36mTESTING:[0m status return 0---
[32mPASS - Expected value:0, Actual:0[0m
[36mTESTING:[0m handcount += 2---
[31mFAIL - Expected value: 7, Actual: 8[0m
[36mTESTING:[0m discardpile + 1---
[31mFAIL - Expected value: 1, Actual: 0[0m
[36mTESTING:[0m status return 0---
[32mPASS - Expected value:0, Actual:0[0m
[36mTESTING:[0m handcount += 2---
[32mPASS - Expected value:10, Actual:10[0m
[36mTESTING:[0m discardpile + 1---
[31mFAIL - Expected value: 1, Actual: 0[0m
Interval:86
current seed value: 5404
[36mTESTING:[0m status return 0---
[32mPASS - Expected value:0, Actual:0[0m
[36mTESTING:[0m handcount += 2---
[31mFAIL - Expected value: 7, Actual: 8[0m
[36mTESTING:[0m discardpile + 1---
[31mFAIL - Expected value: 1, Actual: 0[0m
[36mTESTING:[0m status return 0---
[32mPASS - Expected value:0, Actual:0[0m
[36mTESTING:[0m handcount += 2---
[32mPASS - Expected value:10, Actual:10[0m
[36mTESTING:[0m discardpile + 1---
[31mFAIL - Expected value: 1, Actual: 0[0m
Interval:88
current seed value: 2755
[36mTESTING:[0m status return 0---
[32mPASS - Expected value:0, Actual:0[0m
[36mTESTING:[0m handcount += 2---
[31mFAIL - Expected value: 7, Actual: 8[0m
[36mTESTING:[0m discardpile + 1---
[31mFAIL - Expected value: 1, Actual: 0[0m
[36mTESTING:[0m status return 0---
[32mPASS - Expected value:0, Actual:0[0m
[36mTESTING:[0m handcount += 2---
[32mPASS - Expected value:10, Actual:10[0m
[36mTESTING:[0m discardpile + 1---
[31mFAIL - Expected value: 1, Actual: 0[0m
Interval:90
current seed value: 9933
[36mTESTING:[0m status return 0---
[32mPASS - Expected value:0, Actual:0[0m
[36mTESTING:[0m handcount += 2---
[31mFAIL - Expected value: 7, Actual: 8[0m
[36mTESTING:[0m discardpile + 1---
[31mFAIL - Expected value: 1, Actual: 0[0m
[36mTESTING:[0m status return 0---
[32mPASS - Expected value:0, Actual:0[0m
[36mTESTING:[0m handcount += 2---
[32mPASS - Expected value:10, Actual:10[0m
[36mTESTING:[0m discardpile + 1---
[31mFAIL - Expected value: 1, Actual: 0[0m
Interval:92
current seed value: 9677
[36mTESTING:[0m status return 0---
[32mPASS - Expected value:0, Actual:0[0m
[36mTESTING:[0m handcount += 2---
[31mFAIL - Expected value: 7, Actual: 8[0m
[36mTESTING:[0m discardpile + 1---
[31mFAIL - Expected value: 1, Actual: 0[0m
[36mTESTING:[0m status return 0---
[32mPASS - Expected value:0, Actual:0[0m
[36mTESTING:[0m handcount += 2---
[32mPASS - Expected value:10, Actual:10[0m
[36mTESTING:[0m discardpile + 1---
[31mFAIL - Expected value: 1, Actual: 0[0m
Interval:94
current seed value: 7740
[36mTESTING:[0m status return 0---
[32mPASS - Expected value:0, Actual:0[0m
[36mTESTING:[0m handcount += 2---
[31mFAIL - Expected value: 7, Actual: 8[0m
[36mTESTING:[0m discardpile + 1---
[31mFAIL - Expected value: 1, Actual: 0[0m
[36mTESTING:[0m status return 0---
[32mPASS - Expected value:0, Actual:0[0m
[36mTESTING:[0m handcount += 2---
[32mPASS - Expected value:10, Actual:10[0m
[36mTESTING:[0m discardpile + 1---
[31mFAIL - Expected value: 1, Actual: 0[0m
Interval:96
current seed value: 6227
[36mTESTING:[0m status return 0---
[32mPASS - Expected value:0, Actual:0[0m
[36mTESTING:[0m handcount += 2---
[31mFAIL - Expected value: 7, Actual: 8[0m
[36mTESTING:[0m discardpile + 1---
[31mFAIL - Expected value: 1, Actual: 0[0m
[36mTESTING:[0m status return 0---
[32mPASS - Expected value:0, Actual:0[0m
[36mTESTING:[0m handcount += 2---
[32mPASS - Expected value:10, Actual:10[0m
[36mTESTING:[0m discardpile + 1---
[31mFAIL - Expected value: 1, Actual: 0[0m
Interval:98
current seed value: 8095
[36mTESTING:[0m status return 0---
[32mPASS - Expected value:0, Actual:0[0m
[36mTESTING:[0m handcount += 2---
[31mFAIL - Expected value: 7, Actual: 8[0m
[36mTESTING:[0m discardpile + 1---
[31mFAIL - Expected value: 1, Actual: 0[0m
[36mTESTING:[0m status return 0---
[32mPASS - Expected value:0, Actual:0[0m
[36mTESTING:[0m handcount += 2---
[32mPASS - Expected value:10, Actual:10[0m
[36mTESTING:[0m discardpile + 1---
[31mFAIL - Expected value: 1, Actual: 0[0m
[0mfound:150 errors out of 100 intervals
File 'dominion.c'
Lines executed:37.30% of 555
Branches executed:31.65% of 417
Taken at least once:28.30% of 417
Calls executed:21.74% of 92
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:24
        -:    0:Programs:23
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 207824 returned 100% blocks executed 100%
   207824:    8:int compare(const void* a, const void* b) {
   207824:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 16496 (fallthrough)
branch  1 taken 191328
    16496:   10:    return 1;
   191328:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 46291 (fallthrough)
branch  1 taken 145037
    46291:   12:    return -1;
   145037:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 2409 returned 100% blocks executed 94%
     2409:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
     2409:   44:  SelectStream(1);
call    0 returned 2409
     2409:   45:  PutSeed((long)randomSeed);
call    0 returned 2409
        -:   46:  
        -:   47:  //check number of players
     2409:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 2409 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 2409
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
     2409:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    26499:   57:  for (i = 0; i < 10; i++)
branch  0 taken 24090
branch  1 taken 2409 (fallthrough)
        -:   58:    {
   264990:   59:      for (j = 0; j < 10; j++)
branch  0 taken 240900
branch  1 taken 24090 (fallthrough)
        -:   60:        {
   240900:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 216810 (fallthrough)
branch  1 taken 24090
branch  2 taken 0 (fallthrough)
branch  3 taken 216810
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
     2409:   73:  if (numPlayers == 2)
branch  0 taken 10 (fallthrough)
branch  1 taken 2399
        -:   74:    {
       10:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
     2399:   77:  else if (numPlayers == 3)
branch  0 taken 0 (fallthrough)
branch  1 taken 2399
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
     2399:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
     2409:   87:  if (numPlayers == 2)
branch  0 taken 10 (fallthrough)
branch  1 taken 2399
        -:   88:    {
       10:   89:      state->supplyCount[estate] = 8;
       10:   90:      state->supplyCount[duchy] = 8;
       10:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
     2399:   95:      state->supplyCount[estate] = 12;
     2399:   96:      state->supplyCount[duchy] = 12;
     2399:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
     2409:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     2409:  102:  state->supplyCount[silver] = 40;
     2409:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
    50589:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 48180
branch  1 taken 2409 (fallthrough)
        -:  107:    {
   397485:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 373395
branch  1 taken 24090 (fallthrough)
        -:  109:	{
   373395:  110:	  if (kingdomCards[j] == i)
branch  0 taken 24090 (fallthrough)
branch  1 taken 349305
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
    24090:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 23091 (fallthrough)
branch  1 taken 999
branch  2 taken 2409 (fallthrough)
branch  3 taken 20682
        -:  114:		{
     6816:  115:		  if (numPlayers == 2){ 
branch  0 taken 10 (fallthrough)
branch  1 taken 3398
       10:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
     3398:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
    20682:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
    24090:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
   349305:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
    12025:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 9616
branch  1 taken 2409 (fallthrough)
        -:  139:    {
     9616:  140:      state->deckCount[i] = 0;
    38464:  141:      for (j = 0; j < 3; j++)
branch  0 taken 28848
branch  1 taken 9616 (fallthrough)
        -:  142:	{
    28848:  143:	  state->deck[i][j] = estate;
    28848:  144:	  state->deckCount[i]++;
        -:  145:	}
    76928:  146:      for (j = 3; j < 10; j++)
branch  0 taken 67312
branch  1 taken 9616 (fallthrough)
        -:  147:	{
    67312:  148:	  state->deck[i][j] = copper;
    67312:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
    12025:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 9616
branch  1 taken 2409 (fallthrough)
        -:  155:    {
     9616:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 9616
branch  1 taken 0 (fallthrough)
branch  2 taken 9616
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
    12025:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 9616
branch  1 taken 2409 (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
     9616:  166:      state->handCount[i] = 0;
     9616:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
    67452:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 65043
branch  1 taken 2409 (fallthrough)
        -:  177:    {
    65043:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
     2409:  182:  state->outpostPlayed = 0;
     2409:  183:  state->phase = 0;
     2409:  184:  state->numActions = 1;
     2409:  185:  state->numBuys = 1;
     2409:  186:  state->playedCardCount = 0;
     2409:  187:  state->whoseTurn = 0;
     2409:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
    14454:  192:  for (it = 0; it < 5; it++){
branch  0 taken 12045
branch  1 taken 2409 (fallthrough)
    12045:  193:    drawCard(state->whoseTurn, state);
call    0 returned 12045
        -:  194:  }
        -:  195:
     2409:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 2409
        -:  197:
     2409:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 19512 returned 100% blocks executed 100%
    19512:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
    19512:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
    19512:  209:  if (state->deckCount[player] < 1)
branch  0 taken 4969 (fallthrough)
branch  1 taken 14543
     4969:  210:    return -1;
    14543:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 14543
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
   161754:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 132668
branch  1 taken 14543 (fallthrough)
   132668:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 132668
   132668:  216:    newDeck[newDeckPos] = state->deck[player][card];
   132668:  217:    newDeckPos++;
   431451:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 298783
branch  1 taken 132668 (fallthrough)
   298783:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
   132668:  221:    state->deckCount[player]--;
        -:  222:  }
   147211:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 132668
branch  1 taken 14543 (fallthrough)
   132668:  224:    state->deck[player][i] = newDeck[i];
   132668:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
    14543:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 10 returned 100% blocks executed 86%
       10:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
       10:  280:  who = state->whoseTurn;
        -:  281:
       10:  282:  if (state->numBuys < 1){
branch  0 taken 0 (fallthrough)
branch  1 taken 10
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
       10:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 returned 10
branch  1 taken 0 (fallthrough)
branch  2 taken 10
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
       10:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 returned 10
branch  1 taken 4 (fallthrough)
branch  2 taken 6
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
        4:  293:    return -1;
        -:  294:  } else {
        6:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
        6:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 returned 6
        -:  298:  
        6:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 returned 6
        6:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
        6:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 16 returned 100% blocks executed 100%
       16:  320:int supplyCount(int card, struct gameState *state) {
       16:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 20 returned 100% blocks executed 100%
       20:  346:int whoseTurn(struct gameState *state) {
       20:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 4 returned 100% blocks executed 100%
        4:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
        4:  353:  int currentPlayer = whoseTurn(state);
call    0 returned 4
        -:  354:  
        -:  355:  //Discard hand
       24:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 taken 20
branch  1 taken 4 (fallthrough)
       20:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
       20:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
        4:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
        4:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 taken 3 (fallthrough)
branch  1 taken 1
        3:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
        1:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
        4:  370:  state->outpostPlayed = 0;
        4:  371:  state->phase = 0;
        4:  372:  state->numActions = 1;
        4:  373:  state->coins = 0;
        4:  374:  state->numBuys = 1;
        4:  375:  state->playedCardCount = 0;
        4:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
       24:  380:  for (k = 0; k < 5; k++){
branch  0 taken 20
branch  1 taken 4 (fallthrough)
       20:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 returned 20
        -:  382:  }
        -:  383:
        -:  384:  //Update money
        4:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 returned 4
        -:  386:
        4:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 19687 returned 100% blocks executed 100%
    19687:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
    19687:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 3025 (fallthrough)
branch  1 taken 16662
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
     4568:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 1543
branch  1 taken 3025 (fallthrough)
     1543:  534:      state->deck[player][i] = state->discard[player][i];
     1543:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
     3025:  538:    state->deckCount[player] = state->discardCount[player];
     3025:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
     3025:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 3025
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
     3025:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
     3025:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
     3025:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
     3025:  559:    if (deckCounter == 0)
branch  0 taken 2094 (fallthrough)
branch  1 taken 931
     2094:  560:      return -1;
        -:  561:
      931:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
      931:  563:    state->deckCount[player]--;
      931:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
    16662:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
    16662:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
    16662:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    16662:  576:    state->deckCount[player]--;
    16662:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
    17593:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 46 returned 100% blocks executed 100%
       46:  583:int getCost(int cardNumber)
        -:  584:{
       46:  585:  switch( cardNumber ) 
branch  0 taken 2
branch  1 taken 1
branch  2 taken 1
branch  3 taken 1
branch  4 taken 1
branch  5 taken 1
branch  6 taken 1
branch  7 taken 2
branch  8 taken 1
branch  9 taken 1
branch 10 taken 3
branch 11 taken 2
branch 12 taken 1
branch 13 taken 3
branch 14 taken 3
branch 15 taken 1
branch 16 taken 1
branch 17 taken 2
branch 18 taken 1
branch 19 taken 2
branch 20 taken 1
branch 21 taken 3
branch 22 taken 3
branch 23 taken 1
branch 24 taken 1
branch 25 taken 3
branch 26 taken 1
branch 27 taken 2
        -:  586:    {
        -:  587:    case curse:
        2:  588:      return 0;
        -:  589:    case estate:
        1:  590:      return 2;
        -:  591:    case duchy:
        1:  592:      return 5;
        -:  593:    case province:
        1:  594:      return 8;
        -:  595:    case copper:
        1:  596:      return 0;
        -:  597:    case silver:
        1:  598:      return 3;
        -:  599:    case gold:
        1:  600:      return 6;
        -:  601:    case adventurer:
        2:  602:      return 6;
        -:  603:    case council_room:
        1:  604:      return 5;
        -:  605:    case feast:
        1:  606:      return 4;
        -:  607:    case gardens:
        3:  608:      return 4;
        -:  609:    case mine:
        2:  610:      return 5;
        -:  611:    case remodel:
        1:  612:      return 4;
        -:  613:    case smithy:
        3:  614:      return 4;
        -:  615:    case village:
        3:  616:      return 3;
        -:  617:    case baron:
        1:  618:      return 4;
        -:  619:    case great_hall:
        1:  620:      return 3;
        -:  621:    case minion:
        2:  622:      return 5;
        -:  623:    case steward:
        1:  624:      return 3;
        -:  625:    case tribute:
        2:  626:      return 5;
        -:  627:    case ambassador:
        1:  628:      return 3;
        -:  629:    case cutpurse:
        3:  630:      return 4;
        -:  631:    case embargo: 
        3:  632:      return 2;
        -:  633:    case outpost:
        1:  634:      return 5;
        -:  635:    case salvager:
        1:  636:      return 4;
        -:  637:    case sea_hag:
        3:  638:      return 4;
        -:  639:    case treasure_map:
        1:  640:      return 4;
        -:  641:    }
        -:  642:	
        2:  643:  return -1;
        -:  644:}
        -:  645:
        -:  646:/* MORANSP CHANGES*/
        -:  647://SMITHY
function dom_smithy called 314 returned 100% blocks executed 100%
      314:  648:int dom_smithy(int handPos, int currentPlayer, struct gameState *state)
        -:  649:{
        -:  650:  int i;
        -:  651:  //+3 Cards
     1256:  652:  for (i = 0; i < 3; i++)
branch  0 taken 942
branch  1 taken 314 (fallthrough)
        -:  653:	{
      942:  654:	  drawCard(currentPlayer, state);
call    0 returned 942
        -:  655:	}
        -:  656:			
        -:  657:      //discard card from handi\
        -:  658:      discardCard(handPos, currentPlayer, state, 0);
      314:  659:      return 0;
        -:  660:}
        -:  661://END SMITHY
        -:  662:
        -:  663://ADVENTURER
function dom_adventurer called 2186 returned 100% blocks executed 100%
     2186:  664:int dom_adventurer(int cardDrawn, int drawntreasure, int currentPlayer, int *temphand, struct gameState *state, int z)
        -:  665:{ 
    10952:  666:	while(drawntreasure<2){
branch  0 taken 6580
branch  1 taken 2186 (fallthrough)
     6580:  667:		if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 2875 (fallthrough)
branch  1 taken 3705
     2875:  668:		  shuffle(currentPlayer, state);
call    0 returned 2875
        -:  669:		}
     6580:  670:		drawCard(currentPlayer, state);
call    0 returned 6580
     6580:  671:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
     6580:  672:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 2208 (fallthrough)
branch  1 taken 4372
branch  2 taken 2208 (fallthrough)
branch  3 taken 0
branch  4 taken 0 (fallthrough)
branch  5 taken 2208
     4372:  673:		  drawntreasure++;
        -:  674:		else{
     2208:  675:		  temphand[z]=cardDrawn;
     2208:  676:		  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
     2208:  677:		  z++;
        -:  678:		}
        -:  679:	      }
     6580:  680:	      while(z-1>=0){
branch  0 taken 2208
branch  1 taken 2186 (fallthrough)
     2208:  681:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
     2208:  682:		z=z-1;
        -:  683:	      }
     2186:  684:	      return 1;
        -:  685:}
        -:  686://END ADVENTURER
        -:  687:
        -:  688://VILLAGE
function dom_village called 100 returned 100% blocks executed 100%
      100:  689:int dom_village(int handPos, int currentPlayer, struct gameState *state)
        -:  690:{
        -:  691:      //+1 Card
      100:  692:      drawCard(currentPlayer, state);
call    0 returned 100
        -:  693:			
        -:  694:      //+2 Actions
      100:  695:      state->numActions = state->numActions + 3;
        -:  696:			
        -:  697:      //discard played card from hand\
        -:  698:      discardCard(handPos, currentPlayer, state, 0);
      100:  699:      return 0;
        -:  700:}
        -:  701://END VILLAGE
        -:  702:
        -:  703://OUTPOST
function dom_outpost called 0 returned 0% blocks executed 0%
    #####:  704:int dom_outpost(int handPos, int currentPlayer, struct gameState *state)
        -:  705:{
        -:  706:      //set outpost flag
    #####:  707:      state->outpostPlayed++;
        -:  708:			
        -:  709:      //discard card\
        -:  710:      discardCard(handPos, currentPlayer, state, 0);
    #####:  711:      return 1;
        -:  712:}
        -:  713://END OUTPOST
        -:  714:
        -:  715://EMBARGO
function dom_embargo called 0 returned 0% blocks executed 0%
    #####:  716:int dom_embargo(int choice1, int handPos, int currentPlayer, struct gameState *state)
        -:  717:{
        -:  718:      //+2 Coins
    #####:  719:      state->coins = state->coins + 2;
        -:  720:			
        -:  721:      //see if selected pile is in play
    #####:  722:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -:  723:	{
    #####:  724:	  return -1;
        -:  725:	}
        -:  726:			
        -:  727:      //add embargo token to selected supply pile
    #####:  728:      state->embargoTokens[choice1]++;
        -:  729:			
        -:  730:      //trash card
    #####:  731:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####:  732:      return 0;
        -:  733:	
        -:  734:}
        -:  735://END EMBARGO
        -:  736:/* END MORANSP CHANGES */
        -:  737:
function cardEffect called 0 returned 0% blocks executed 0%
    #####:  738:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  739:{
        -:  740:  int i;
        -:  741:  int j;
        -:  742:  int k;
        -:  743:  int x;
        -:  744:  int index;
    #####:  745:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  746:  int nextPlayer = currentPlayer + 1;
        -:  747:
    #####:  748:  int tributeRevealedCards[2] = {-1, -1};
        -:  749:  int temphand[MAX_HAND];// moved above the if statement
    #####:  750:  int drawntreasure=0;
        -:  751:  int cardDrawn;
    #####:  752:  int z = 0;// this is the counter for the temp hand
    #####:  753:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  754:    nextPlayer = 0;
        -:  755:  }
        -:  756:  
        -:  757:	
        -:  758:  //uses switch to select card and perform actions
    #####:  759:  switch( card ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  760:    {
        -:  761:    case adventurer:
        -:  762:	//edited to single function
    #####:  763:	return dom_adventurer(cardDrawn, drawntreasure, currentPlayer, temphand, state, z);
call    0 never executed
        -:  764:		
        -:  765:    case council_room:
        -:  766:      //+4 Cards
    #####:  767:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  768:	{
    #####:  769:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  770:	}
        -:  771:			
        -:  772:      //+1 Buy
    #####:  773:      state->numBuys++;
        -:  774:			
        -:  775:      //Each other player draws a card
    #####:  776:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  777:	{
    #####:  778:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  779:	    {
    #####:  780:	      drawCard(i, state);
call    0 never executed
        -:  781:	    }
        -:  782:	}
        -:  783:			
        -:  784:      //put played card in played card pile
    #####:  785:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  786:			
    #####:  787:      return 0;
        -:  788:			
        -:  789:    case feast:
        -:  790:      //gain card with cost up to 5
        -:  791:      //Backup hand
    #####:  792:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  793:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  794:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  795:      }
        -:  796:      //Backup hand
        -:  797:
        -:  798:      //Update Coins for Buy
    #####:  799:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  800:      x = 1;//Condition to loop on
    #####:  801:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  802:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  803:	  if (DEBUG)
        -:  804:	    printf("None of that card left, sorry!\n");
        -:  805:
        -:  806:	  if (DEBUG){
        -:  807:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  808:	  }
        -:  809:	}
    #####:  810:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  811:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  812:
        -:  813:	  if (DEBUG){
        -:  814:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  815:	  }
        -:  816:	}
        -:  817:	else{
        -:  818:
        -:  819:	  if (DEBUG){
        -:  820:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  821:	  }
        -:  822:
    #####:  823:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  824:	  x = 0;//No more buying cards
        -:  825:
        -:  826:	  if (DEBUG){
        -:  827:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  828:	  }
        -:  829:
        -:  830:	}
        -:  831:      }     
        -:  832:
        -:  833:      //Reset Hand
    #####:  834:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  835:	state->hand[currentPlayer][i] = temphand[i];
    #####:  836:	temphand[i] = -1;
        -:  837:      }
        -:  838:      //Reset Hand
        -:  839:      			
    #####:  840:      return 0;
        -:  841:			
        -:  842:    case gardens:
    #####:  843:      return -1;
        -:  844:			
        -:  845:    case mine:
    #####:  846:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  847:
    #####:  848:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  849:	{
    #####:  850:	  return -1;
        -:  851:	}
        -:  852:		
    #####:  853:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  854:	{
    #####:  855:	  return -1;
        -:  856:	}
        -:  857:
    #####:  858:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  859:	{
    #####:  860:	  return -1;
        -:  861:	}
        -:  862:
    #####:  863:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  864:
        -:  865:      //discard card from hand
    #####:  866:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  867:
        -:  868:      //discard trashed card
    #####:  869:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  870:	{
    #####:  871:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  872:	    {
    #####:  873:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  874:	      break;
        -:  875:	    }
        -:  876:	}
        -:  877:			
    #####:  878:      return 0;
        -:  879:			
        -:  880:    case remodel:
    #####:  881:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  882:
    #####:  883:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  884:	{
    #####:  885:	  return -1;
        -:  886:	}
        -:  887:
    #####:  888:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  889:
        -:  890:      //discard card from hand
    #####:  891:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  892:
        -:  893:      //discard trashed card
    #####:  894:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  895:	{
    #####:  896:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  897:	    {
    #####:  898:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  899:	      break;
        -:  900:	    }
        -:  901:	}
        -:  902:
        -:  903:
    #####:  904:      return 0;
        -:  905:		
        -:  906:    case smithy:
    #####:  907: 	return dom_smithy(handPos, currentPlayer, state);
call    0 never executed
        -:  908:	
        -:  909:    case village:
    #####:  910:   	return dom_village(handPos, currentPlayer, state);
call    0 never executed
        -:  911:
        -:  912:    case baron:
    #####:  913:      state->numBuys++;//Increase buys by 1!
    #####:  914:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  915:	int p = 0;//Iterator for hand!
    #####:  916:	int card_not_discarded = 1;//Flag for discard set!
    #####:  917:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  918:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  919:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  920:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  921:	    state->discardCount[currentPlayer]++;
    #####:  922:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  923:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  924:	    }
    #####:  925:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  926:	    state->handCount[currentPlayer]--;
    #####:  927:	    card_not_discarded = 0;//Exit the loop
        -:  928:	  }
    #####:  929:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  930:	    if(DEBUG) {
        -:  931:	      printf("No estate cards in your hand, invalid choice\n");
        -:  932:	      printf("Must gain an estate if there are any\n");
        -:  933:	    }
    #####:  934:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  935:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  936:	      state->supplyCount[estate]--;//Decrement estates
    #####:  937:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  938:		isGameOver(state);
call    0 never executed
        -:  939:	      }
        -:  940:	    }
    #####:  941:	    card_not_discarded = 0;//Exit the loop
        -:  942:	  }
        -:  943:			    
        -:  944:	  else{
    #####:  945:	    p++;//Next card
        -:  946:	  }
        -:  947:	}
        -:  948:      }
        -:  949:			    
        -:  950:      else{
    #####:  951:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  952:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  953:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  954:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  955:	    isGameOver(state);
call    0 never executed
        -:  956:	  }
        -:  957:	}
        -:  958:      }
        -:  959:	    
        -:  960:      
    #####:  961:      return 0;
        -:  962:		
        -:  963:    case great_hall:
        -:  964:      //+1 Card
    #####:  965:      drawCard(currentPlayer, state);
call    0 never executed
        -:  966:			
        -:  967:      //+1 Actions
    #####:  968:      state->numActions++;
        -:  969:			
        -:  970:      //discard card from hand
    #####:  971:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  972:      return 0;
        -:  973:		
        -:  974:    case minion:
        -:  975:      //+1 action
    #####:  976:      state->numActions++;
        -:  977:			
        -:  978:      //discard card from hand
    #####:  979:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  980:			
    #####:  981:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  982:	{
    #####:  983:	  state->coins = state->coins + 2;
        -:  984:	}
        -:  985:			
    #####:  986:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  987:	{
        -:  988:	  //discard hand
    #####:  989:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  990:	    {
    #####:  991:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  992:	    }
        -:  993:				
        -:  994:	  //draw 4
    #####:  995:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  996:	    {
    #####:  997:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  998:	    }
        -:  999:				
        -: 1000:	  //other players discard hand and redraw if hand size > 4
    #####: 1001:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1002:	    {
    #####: 1003:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1004:		{
    #####: 1005:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -: 1006:		    {
        -: 1007:		      //discard hand
    #####: 1008:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -: 1009:			{
    #####: 1010:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1011:			}
        -: 1012:							
        -: 1013:		      //draw 4
    #####: 1014:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1015:			{
    #####: 1016:			  drawCard(i, state);
call    0 never executed
        -: 1017:			}
        -: 1018:		    }
        -: 1019:		}
        -: 1020:	    }
        -: 1021:				
        -: 1022:	}
    #####: 1023:      return 0;
        -: 1024:		
        -: 1025:    case steward:
    #####: 1026:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1027:	{
        -: 1028:	  //+2 cards
    #####: 1029:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1030:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1031:	}
    #####: 1032:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1033:	{
        -: 1034:	  //+2 coins
    #####: 1035:	  state->coins = state->coins + 2;
        -: 1036:	}
        -: 1037:      else
        -: 1038:	{
        -: 1039:	  //trash 2 cards in hand
    #####: 1040:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1041:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1042:	}
        -: 1043:			
        -: 1044:      //discard card from hand
    #####: 1045:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1046:      return 0;
        -: 1047:		
        -: 1048:    case tribute:
    #####: 1049:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1050:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1051:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1052:	  state->deckCount[nextPlayer]--;
        -: 1053:	}
    #####: 1054:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1055:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1056:	  state->discardCount[nextPlayer]--;
        -: 1057:	}
        -: 1058:	else{
        -: 1059:	  //No Card to Reveal
        -: 1060:	  if (DEBUG){
        -: 1061:	    printf("No cards to reveal\n");
        -: 1062:	  }
        -: 1063:	}
        -: 1064:      }
        -: 1065:	    
        -: 1066:      else{
    #####: 1067:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1068:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1069:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1070:	    state->deckCount[nextPlayer]++;
    #####: 1071:	    state->discard[nextPlayer][i] = -1;
    #####: 1072:	    state->discardCount[nextPlayer]--;
        -: 1073:	  }
        -: 1074:			    
    #####: 1075:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1076:	} 
    #####: 1077:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1078:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1079:	state->deckCount[nextPlayer]--;
    #####: 1080:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1081:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1082:	state->deckCount[nextPlayer]--;
        -: 1083:      }    
        -: 1084:		       
    #####: 1085:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1086:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1087:	state->playedCardCount++;
    #####: 1088:	tributeRevealedCards[1] = -1;
        -: 1089:      }
        -: 1090:
    #####: 1091:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1092:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1093:	  state->coins += 2;
        -: 1094:	}
        -: 1095:		    
    #####: 1096:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1097:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1098:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1099:	}
        -: 1100:	else{//Action Card
    #####: 1101:	  state->numActions = state->numActions + 2;
        -: 1102:	}
        -: 1103:      }
        -: 1104:	    
    #####: 1105:      return 0;
        -: 1106:		
        -: 1107:    case ambassador:
    #####: 1108:      j = 0;		//used to check if player has enough cards to discard
        -: 1109:
    #####: 1110:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1111:	{
    #####: 1112:	  return -1;				
        -: 1113:	}
        -: 1114:
    #####: 1115:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1116:	{
    #####: 1117:	  return -1;
        -: 1118:	}
        -: 1119:
    #####: 1120:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1121:	{
    #####: 1122:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1123:	    {
    #####: 1124:	      j++;
        -: 1125:	    }
        -: 1126:	}
    #####: 1127:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1128:	{
    #####: 1129:	  return -1;				
        -: 1130:	}
        -: 1131:
        -: 1132:      if (DEBUG) 
        -: 1133:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1134:
        -: 1135:      //increase supply count for choosen card by amount being discarded
    #####: 1136:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1137:			
        -: 1138:      //each other player gains a copy of revealed card
    #####: 1139:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1140:	{
    #####: 1141:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1142:	    {
    #####: 1143:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1144:	    }
        -: 1145:	}
        -: 1146:
        -: 1147:      //discard played card from hand
    #####: 1148:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1149:
        -: 1150:      //trash copies of cards returned to supply
    #####: 1151:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1152:	{
    #####: 1153:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1154:	    {
    #####: 1155:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1156:		{
    #####: 1157:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1158:		  break;
        -: 1159:		}
        -: 1160:	    }
        -: 1161:	}			
        -: 1162:
    #####: 1163:      return 0;
        -: 1164:		
        -: 1165:    case cutpurse:
        -: 1166:
    #####: 1167:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1168:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1169:	{
    #####: 1170:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1171:	    {
    #####: 1172:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1173:		{
    #####: 1174:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1175:		    {
    #####: 1176:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1177:		      break;
        -: 1178:		    }
    #####: 1179:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1180:		    {
    #####: 1181:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1182:			{
        -: 1183:			  if (DEBUG)
        -: 1184:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1185:			}	
    #####: 1186:		      break;
        -: 1187:		    }		
        -: 1188:		}
        -: 1189:					
        -: 1190:	    }
        -: 1191:				
        -: 1192:	}				
        -: 1193:
        -: 1194:      //discard played card from hand
    #####: 1195:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1196:
    #####: 1197:      return 0;
        -: 1198:
        -: 1199:		
        -: 1200:    case embargo: 
    #####: 1201:      return dom_embargo(choice1, handPos, currentPlayer, state);
call    0 never executed
        -: 1202:	
        -: 1203:    case outpost:
    #####: 1204:      return dom_outpost(handPos, currentPlayer, state);
call    0 never executed
        -: 1205:	
        -: 1206:    case salvager:
        -: 1207:      //+1 buy
    #####: 1208:      state->numBuys++;
        -: 1209:			
    #####: 1210:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1211:	{
        -: 1212:	  //gain coins equal to trashed card
    #####: 1213:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1214:	  //trash card
    #####: 1215:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1216:	}
        -: 1217:			
        -: 1218:      //discard card
    #####: 1219:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1220:      return 0;
        -: 1221:		
        -: 1222:    case sea_hag:
    #####: 1223:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1224:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1225:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1226:	  state->discardCount[i]++;
    #####: 1227:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1228:	}
        -: 1229:      }
    #####: 1230:      return 0;
        -: 1231:		
        -: 1232:    case treasure_map:
        -: 1233:      //search hand for another treasure_map
    #####: 1234:      index = -1;
    #####: 1235:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1236:	{
    #####: 1237:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1238:	    {
    #####: 1239:	      index = i;
    #####: 1240:	      break;
        -: 1241:	    }
        -: 1242:	}
    #####: 1243:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1244:	{
        -: 1245:	  //trash both treasure cards
    #####: 1246:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1247:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1248:
        -: 1249:	  //gain 4 Gold cards
    #####: 1250:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1251:	    {
    #####: 1252:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1253:	    }
        -: 1254:				
        -: 1255:	  //return success
    #####: 1256:	  return 1;
        -: 1257:	}
        -: 1258:			
        -: 1259:      //no second treasure_map found in hand
    #####: 1260:      return -1;
        -: 1261:    }
        -: 1262:	
    #####: 1263:  return -1;
        -: 1264:}
        -: 1265:
function discardCard called 0 returned 0% blocks executed 0%
    #####: 1266:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1267:{
        -: 1268:	
        -: 1269:  //if card is not trashed, added to Played pile 
    #####: 1270:  if (trashFlag < 1)
branch  0 never executed
branch  1 never executed
        -: 1271:    {
        -: 1272:      //add card to played pile
    #####: 1273:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1274:      state->playedCardCount++;
        -: 1275:    }
        -: 1276:	
        -: 1277:  //set played card to -1
    #####: 1278:  state->hand[currentPlayer][handPos] = -1;
        -: 1279:	
        -: 1280:  //remove card from player's hand
    #####: 1281:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 never executed
branch  1 never executed
        -: 1282:    {
        -: 1283:      //reduce number of cards in hand
    #####: 1284:      state->handCount[currentPlayer]--;
        -: 1285:    }
    #####: 1286:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 never executed
branch  1 never executed
        -: 1287:    {
        -: 1288:      //reduce number of cards in hand
    #####: 1289:      state->handCount[currentPlayer]--;
        -: 1290:    }
        -: 1291:  else 	
        -: 1292:    {
        -: 1293:      //replace discarded card with last card in hand
    #####: 1294:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1295:      //set last card to -1
    #####: 1296:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1297:      //reduce number of cards in hand
    #####: 1298:      state->handCount[currentPlayer]--;
        -: 1299:    }
        -: 1300:	
    #####: 1301:  return 0;
        -: 1302:}
        -: 1303:
function gainCard called 6 returned 100% blocks executed 70%
        6: 1304:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1305:{
        -: 1306:  //Note: supplyPos is enum of choosen card
        -: 1307:	
        -: 1308:  //check if supply pile is empty (0) or card is not used in game (-1)
        6: 1309:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 6
branch  1 taken 0 (fallthrough)
branch  2 taken 6
        -: 1310:    {
    #####: 1311:      return -1;
        -: 1312:    }
        -: 1313:	
        -: 1314:  //added card for [whoseTurn] current player:
        -: 1315:  // toFlag = 0 : add to discard
        -: 1316:  // toFlag = 1 : add to deck
        -: 1317:  // toFlag = 2 : add to hand
        -: 1318:
        6: 1319:  if (toFlag == 1)
branch  0 taken 0 (fallthrough)
branch  1 taken 6
        -: 1320:    {
    #####: 1321:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1322:      state->deckCount[player]++;
        -: 1323:    }
        6: 1324:  else if (toFlag == 2)
branch  0 taken 0 (fallthrough)
branch  1 taken 6
        -: 1325:    {
    #####: 1326:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1327:      state->handCount[player]++;
        -: 1328:    }
        -: 1329:  else
        -: 1330:    {
        6: 1331:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        6: 1332:      state->discardCount[player]++;
        -: 1333:    }
        -: 1334:	
        -: 1335:  //decrease number in supply pile
        6: 1336:  state->supplyCount[supplyPos]--;
        -: 1337:	 
        6: 1338:  return 0;
        -: 1339:}
        -: 1340:
function updateCoins called 2413 returned 100% blocks executed 82%
     2413: 1341:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1342:{
        -: 1343:  int i;
        -: 1344:	
        -: 1345:  //reset coin count
     2413: 1346:  state->coins = 0;
        -: 1347:
        -: 1348:  //add coins for each Treasure card in player's hand
    14478: 1349:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 12065
branch  1 taken 2413 (fallthrough)
        -: 1350:    {
    12065: 1351:      if (state->hand[player][i] == copper)
branch  0 taken 9478 (fallthrough)
branch  1 taken 2587
        -: 1352:	{
     9478: 1353:	  state->coins += 1;
        -: 1354:	}
     2587: 1355:      else if (state->hand[player][i] == silver)
branch  0 taken 0 (fallthrough)
branch  1 taken 2587
        -: 1356:	{
    #####: 1357:	  state->coins += 2;
        -: 1358:	}
     2587: 1359:      else if (state->hand[player][i] == gold)
branch  0 taken 0 (fallthrough)
branch  1 taken 2587
        -: 1360:	{
    #####: 1361:	  state->coins += 3;
        -: 1362:	}	
        -: 1363:    }	
        -: 1364:
        -: 1365:  //add bonus
     2413: 1366:  state->coins += bonus;
        -: 1367:
     2413: 1368:  return 0;
        -: 1369:}
        -: 1370:
        -: 1371:
        -: 1372://end of dominion.c
        -: 1373:
